#!/bin/bash

set -e

kube_version="v1.4.4"
helm_version="v2.0.0-beta.2"
minikube_version="v0.12.0"

kube_link="https://github.com/kubernetes/kubernetes/releases/download/${kube_version}/kubernetes.tar.gz"
helm_link="http://storage.googleapis.com/kubernetes-helm/helm-${helm_version}-darwin-amd64.tar.gz"
minikube_link="https://storage.googleapis.com/minikube/releases/${minikube_version}/minikube-darwin-amd64"

pre_install () {
  wget -c "$1" -O "$HOME/$2"
  tar zxvf "$HOME/$2" -C $HOME/
}

post_install () {
  chmod +x "$HOME/$1"
  cp "$HOME/$1" /usr/local/bin/
}

command_exists () {
  type "$1" &> /dev/null ;
}

function print_usage {
  cat << EOF
loku is a management tool for local development for kubernetes

Usage: loku [command]

Commands:
  init               Install loku and dependencies
  url [app_name]     Get App URL
EOF
}

function build_dependencies {
  echo 'Make a sandwich, this may take a few...'

  if ! command_exists docker; then
    echo 'installing docker...'
    brew install docker
    brew install docker-machine
  fi

  if ! command_exists kubectl; then
    echo 'installing kubectl...'
    pre_install ${kube_link} kubernetes.tar.gz 
    post_install kubernetes/platforms/darwin/amd64/kubectl
  fi

  if ! command_exists helm; then
    echo 'installing helm...'
    pre_install  ${helm_link} helm-${helm_version}-darwin-amd64.tar.gz
    post_install darwin-amd64/helm
    if [[ ! -d $HOME/.helm ]]; then
      mkdir $HOME/.helm
      echo "Created helm home at ~/.helm..."
      echo "Pulling latest helm charts"
      git clone https://github.com/kubernetes/charts.git $HOME/.helm/charts
    fi
  fi

  if ! command_exists minikube; then
    echo 'installing minikube...'
    wget ${minikube_link} -O minikube
    chmod +x minikube
    mv minikube /usr/local/bin/minikube
  fi
  echo 'Done.'
}

function get_url {
  if [ -z "$1" ]; then
    "ERROR: Please provide the App Name"
  else
    export NODE_PORT=$(kubectl get --namespace default -o jsonpath="{.spec.ports[0].nodePort}" services $1-drupal)
    export NODE_IP=$(kubectl get nodes --namespace default -o jsonpath="{.items[0].status.addresses[0].address}")
    echo http://$NODE_IP:$NODE_PORT
  fi
}


if [ "$1" == "init" ]; then
  build_dependencies
elif [ "$1" == "url" ]; then
  get_url $2
else
  print_usage
fi
